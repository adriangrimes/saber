#!/bin/bash

### Linode Nanode 1 CPU 1GB RAM
### CentOS 7
### saber-staging

### Check the box for the webadmin-staging SSH key in the Add an SSH key section of linode creation/rebuilding

# Connect to root@<ip> over SSH with private key

# all yum commands will need -y if they are used in an unattended script

# machine setup
hostnamectl set-hostname saber-staging
# copy hosts file
reboot
yum update -y
yum install -y epel-release yum-utils # for htop, nginx, certbot, and others
yum install -y htop
yum-config-manager --enable epel
yum clean all && yum update -y
groupadd www

# create webadmin and move ssh keys over to them
useradd webadmin && passwd webadmin
# give sudo to webadmin
usermod -a -G wheel webadmin
usermod -a -G www webadmin
mkdir /home/webadmin/.ssh/
mv /root/.ssh/authorized_keys /home/webadmin/.ssh/authorized_keys
chown webadmin /home/webadmin/.ssh
chown webadmin /home/webadmin/.ssh/*
chmod 700 /home/webadmin/.ssh
chmod 600 /home/webadmin/.ssh/authorized_keys
systemctl restart sshd

# create web directory
mkdir /var/www/
chown root /var/www
chgrp www /var/www
chmod 775 /var/www
chmod g+s /var/www

# create saber-staging
mkdir /var/www/saber-staging
chgrp www /var/www/saber-staging
chown webadmin /var/www/saber-staging

# create script directory
mkdir /var/scripts
chown root /var/scripts
chgrp www /var/scripts
chmod 770 /var/scripts
chmod g+s /var/scripts

# set firewall to allow port 80 and 443
firewall-cmd --permanent --zone=public --add-service=http
firewall-cmd --permanent --zone=public --add-service=https

# allow nginx to bypass SElinux hardening
chcon -Rt httpd_sys_content_t /var/www/saber-staging
# allow node.js chat server to communicate to the API server
setsebool -P httpd_can_network_connect 1

# fail2ban and email
yum install -y fail2ban sendmail sendmail-cf cyrus-sasl cyrus-sasl-lib cyrus-sasl-plain
# copy fail2ban.local and jail.local to /etc/fail2ban
AuthInfo: "U:root" "I:user@gmail.com" "P:PASSWORD"
# setup sendmail smtp authentication
# create authinfo directory
mkdir /etc/mail/authinfo
chmod 700 /etc/mail/authinfo
# create auth file
makemap hash /etc/mail/authinfo/smtp-auth < /etc/mail/authinfo/smtp-auth

# copy /etc/mail/sendmail.mc over
# re-build sendmail's configuration
make -C /etc/mail

# start and enable services
systemctl start fail2ban
systemctl enable fail2ban
systemctl start sendmail
systemctl enable sendmail
# test sendmail
echo -e "Subject:staging test\nhello from test staging" | sendmail -f "mailersaber@gmail.com" -t "user@gmail.com"
systemctl restart fail2ban
# test if fail2ban is reporting over email

# copy /etc/ssh/sshd_config over to block password and root login
# restart service to take effect
systemctl restart sshd

# install certbot
yum install -y certbot python2-certbot-nginx
# copy /etc/letsencrypt/confs
# certbot --nginx to build new certs
# check if certs should be renewed
certbot certonly
# follow prompts on screen
# Congratulations! Your certificate and chain have been saved at:
# /etc/letsencrypt/live/saber.solversion.com/fullchain.pem
# Your key file has been saved at:
# /etc/letsencrypt/live/saber.solversion.com/privkey.pem
# add cron job to check for a new cert every 12 hours (will only renew when the cert is within 30 days of expiring)
echo "0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' && certbot renew" | tee -a /etc/crontab > /dev/null

# install passenger and nginx
# add passenger repo 
curl --fail -sSLo /etc/yum.repos.d/passenger.repo https://oss-binaries.phusionpassenger.com/yum/definitions/el-passenger.repo
#sudo yum install -y passenger
yum install -y nginx passenger || yum-config-manager --enable cr && yum install -y nginx passenger
# build native passenger extensions
yum install -y passenger-devel-6.0.2

# nginx configuration
# copy nginx conf
# Stop deep linking or hot linking
#location /images/ {
#  valid_referers none blocked www.example.com example.com;
#   if ($invalid_referer) {
#     return   403;
#   }
#}

# add to passenger.conf in /etc/nginx/conf.d/
passenger_root /usr/share/ruby/vendor_ruby/phusion_passenger/locations.ini;
passenger_instance_registry_dir /var/run/passenger-instreg;
passenger_log_level 5;

systemctl enable nginx
systemctl start nginx

# visiting the ip in a browser should show the nginx welcome screen

# login as webadmin over ssh

# copy ember /dist to /var/www/saber-staging/ember

# mysql (mariadb)
yum update -y
yum install -y mariadb-server
systemctl enable mariadb
systemctl start mariadb
# answer yes to all questions, only allow localhost 
mysql_secure_installation <<EOF

y
l5%qX#5W2NjYNAoe
l5%qX#5W2NjYNAoe
y
y
y
y
EOF
# follow prompts, yes to all
# test password
mysql -u root -p

# dependencies for ruby/rails
sudo yum install -y git gcc gcc-c++ ruby-devel bzip2 openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel mysql-devel

# install ruby via rbenv for ruby version management
git clone git://github.com/sstephenson/rbenv.git .rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
#echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bash_profile
exec $SHELL

rbenv install 2.5.3
rbenv global 2.5.3
# update RubyGems system gems
gem update --system --no-document

# install gems for api 
mkdir /var/www/saber-staging/api
cd /var/www/saber-staging/api
# copy rails files
gem install bundler
bundle install --deployment --without development test
# set permissions on rails folder/files
chmod 700 config db
chmod 600 config/database.yml config/secrets.yml

rbenv rehash

# add nodejs repo
curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -
# install nodejs 10.x LTS from node.js repo
sudo yum install -y nodejs
# install pm2 for nodejs process management
sudo npm install pm2 -g
mkdir /var/www/saber-staging/chat
cd /var/www/saber-staging/chat
# copy chat files over
npm install
pm2 start chat-staging-startup.json
pm2 startup
# run given command 
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u webadmin --hp /home/webadmin
pm2 save

# done
sudo yum update
sudo reboot
# all services should be running