## Ember front-end ##
server {
  listen      443 default_server ssl http2; # managed by Certbot
  listen      [::]:443 default_server ssl http2; # managed by Certbot
  server_name saber.solversion.com;
  root        /var/www/saber-staging/ember;
  index       index.html;

  # log files
  access_log  /var/log/nginx/saber-staging-ember.access.log;
  error_log   /var/log/nginx/saber-staging-ember.error.log;

  # ssl files
  ssl_certificate /etc/letsencrypt/live/saber.solversion.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/saber.solversion.com/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  # HSTS/Strict Transport Security
  add_header Strict-Transport-Security "max-age=63072000; preload" always;

  if ($bad_referer) {
    return 444;
  }

  ## default location ##
  location / {
    try_files $uri $uri/ /index.html?/$request_uri;
  }

  # RTMP control url
  location /rtmpcontrol {
    rtmp_control all;

    # only allow access from self
    allow 127.0.0.1;
    deny all;
  }

  # serve HLS video
  location /hls {
    root /var/www/saber-staging/stream;

    # Disable cache
    add_header 'Cache-Control' 'no-cache';

    # CORS setup
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length';

    # allow CORS preflight requests
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }

    types {
      application/vnd.apple.mpegurl m3u8;
      video/mp2t ts;
    }
  }

  # RTMP connection stats
  location /rtmpstat {
    rtmp_stat all;
    rtmp_stat_stylesheet rtmpstat.xsl;
  }
  location /rtmpstat.xsl {
    root /etc/nginx/conf.d;
  }

  # Redirect non-https traffic to https
  if ($scheme != "https") {
      return 301 https://$host$request_uri;
  } # managed by Certbot
}

## Rails API hosted with Passenger ##
server {
  listen 443 ssl http2; # managed by Certbot
  listen [::]:443 ssl http2;
  listen 80; # for nginx rtmp module access. on_connect calls, etc
  listen [::]:80; # for nginx rtmp module access. on_connect calls, etc
  server_name api.saber.solversion.com;

  # API public folder
  root /var/www/saber-staging/api/public;

  # set client body size for file uploads to 32M
  client_max_body_size 32M;

  # Passenger
  passenger_enabled on;
  passenger_app_env staging;
  passenger_ruby /home/webadmin/.rbenv/versions/2.5.3/bin/ruby;
  passenger_friendly_error_pages on;

  # log files
  access_log  /var/log/nginx/saber-staging-api.access.log;
  error_log   /var/log/nginx/saber-staging-api.error.log;

  # ssl
  ssl_certificate /etc/letsencrypt/live/saber.solversion.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/saber.solversion.com/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  include /etc/nginx/security_headers.staging.conf;
  include /etc/nginx/cors_headers.staging.conf;

  if ($bad_referer) {
    return 444;
  }

  location / {

    include /etc/nginx/security_headers.staging.conf;
    include /etc/nginx/cors_headers.staging.conf;

    if ($request_method = 'OPTIONS') {
      # security headers
      # deny use of our sites inside a frame to prevent clickjacking
      add_header X-Frame-Options SAMEORIGIN always;

      # cross-site scripting XSS filter
      add_header X-XSS-Protection "1; mode=block" always;

      # block referrers
      add_header Referrer-Policy "no-referrer" always;

      #CORS headers
      add_header 'Access-Control-Allow-Origin' 'https://saber.solversion.com';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Authorization,Token,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }
  }
}

## node.js Chat Server ##
server {
  listen 443 ssl http2; # managed by Certbot
  listen [::]:443 ssl http2;
  server_name chat.saber.solversion.com;

  # log files
  access_log  /var/log/nginx/saber-staging-chat.access.log;
  error_log   /var/log/nginx/saber-staging-chat.error.log;

  # ssl
  ssl_certificate /etc/letsencrypt/live/saber.solversion.com/fullchain.pem; # managed by Certbot
  ssl_certificate_key /etc/letsencrypt/live/saber.solversion.com/privkey.pem; # managed by Certbot
  include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  # HSTS/Strict Transport Security
  add_header Strict-Transport-Security "max-age=63072000; preload" always;

  if ($bad_referer) {
    return 444;
  }

  location / {
    proxy_pass   http://127.0.0.1:7000;

    error_page 502 =503 /maintenance.html;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
    proxy_redirect off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_hide_header X-Powered-By;
  }

  location /maintenance.html {
    return 503;
  }

  # Redirect non-https traffic to https
  if ($scheme != "https") {
      return 301 https://$host$request_uri;
  } # managed by Certbot
}
